# -*- coding: utf-8 -*-
"""
Created on Fri Feb  9 11:52:59 2024

@author: admin
"""

from sklearn.svm import SVC
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from prettytable import PrettyTable

# Load data and select only 80000 features
df = pd.read_csv('F:\Mini_malware_sample\merge_mal_ben/feature_vec_malware.csv').iloc[:, :80001]

# Separate features and labels
X = df.iloc[:, 2:]  # Starting from the 3rd column as features
y = df['family']

# Encode labels into numeric format
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X)
X = scaler.transform(X)



# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize classifiers with different kernels
classifiers = {
    "SVM Linear": SVC(kernel='linear', random_state=42),
    "SVM Polynomial Degree 3": SVC(kernel='poly', degree=3, random_state=42),
    "SVM Polynomial Degree 4": SVC(kernel='poly', degree=4, random_state=42),
    "SVM RBF": SVC(kernel='rbf', random_state=42),
    "SVM Sigmoid": SVC(kernel='sigmoid', random_state=42)
}

# Initialize dictionaries to store evaluation metrics
metrics_dict = {
    "Classifier": [],
    "Accuracy": [],
    "Precision": [],
    "Recall": [],
    "F1 Score": [],
}

# Iterate through each classifier
for clf_name, classifier in classifiers.items():
    classifier.fit(X_train, y_train)
    predictions = classifier.predict(X_test)
    
    # Calculate evaluation metrics
    conf_matrix = confusion_matrix(y_test, predictions)
    
    # Create confusion matrix table
    conf_matrix_table = PrettyTable()
    conf_matrix_table.title = f"Confusion Matrix for {clf_name}"
    conf_matrix_table.field_names = ["", "Predicted 0", "Predicted 1", "Predicted 2", "Predicted 3", "Predicted 4", "Predicted 5", "Predicted 6", "Predicted 7"]
    
    # Add rows for each actual class
    for i in range(conf_matrix.shape[0]):
        conf_matrix_table.add_row([f"Actual {i}"] + list(conf_matrix[i]))
    
    # Print confusion matrix for each classifier
    print(conf_matrix_table)
            
    # Calculate metrics

    accuracy = np.trace(conf_matrix) / np.sum(conf_matrix)
    precision = np.where(np.sum(conf_matrix, axis=0) == 0, 0, np.diag(conf_matrix) / np.sum(conf_matrix, axis=0))
    recall = np.diag(conf_matrix) / np.sum(conf_matrix, axis=1)
    f1_score = 2 * precision * recall / (precision + recall)

    # accuracy = np.trace(conf_matrix) / np.sum(conf_matrix)
    # precision = np.diag(conf_matrix) / np.sum(conf_matrix, axis=0)
    # recall = np.diag(conf_matrix) / np.sum(conf_matrix, axis=1)
    # f1_score = 2 * precision * recall / (precision + recall)
    
    # Store evaluation metrics in the dictionary
    metrics_dict["Classifier"].append(clf_name)
    metrics_dict["Accuracy"].append(accuracy)
    metrics_dict["Precision"].append(np.mean(precision))
    metrics_dict["Recall"].append(np.mean(recall))
    metrics_dict["F1 Score"].append(np.mean(f1_score))
    
# Create PrettyTable for evaluation metrics
metrics_table = PrettyTable()
metrics_table.field_names = ["Classifier", "Accuracy", "Precision", "Recall", "F1 Score"]
for i in range(len(metrics_dict["Classifier"])):
    metrics_table.add_row([
        metrics_dict["Classifier"][i],
        metrics_dict["Accuracy"][i],
        metrics_dict["Precision"][i],
        metrics_dict["Recall"][i],
        metrics_dict["F1 Score"][i]
    ])

# Print evaluation metrics table
print("Evaluation Metrics:")
print(metrics_table)
