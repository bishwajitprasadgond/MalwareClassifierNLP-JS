import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import confusion_matrix
from prettytable import PrettyTable

# Load data and select only 80000 features
df = pd.read_csv(r'C:\Users\Admin\Documents\GitHub\datasets/feature_vec_malware.csv').iloc[:, :80001]

# Separate features and labels
X = df.iloc[:, 2:].values  # Starting from the 3rd column as features
y = df['family'].values

# Encode labels into numeric format
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)
y_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))

# Check the size and shape of X
print("Original shape of X:", X.shape)

# Reshape X to be suitable for CNN input based on actual feature vector shape
actual_height = X.shape[0] // 80000  # Calculate the height based on the number of samples and width
print("Calculated height:", actual_height)

# Reshape X
X = X.reshape(-1, actual_height, 400, 1)
print("Reshaped X shape:", X.shape)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Convert labels to one-hot encoding
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

# Initialize the CNN model
model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(actual_height, 400, 1)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(len(label_encoder.classes_), activation='softmax')  # Output layer with softmax activation for multi-class classification
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Loss: {loss}')
print(f'Test Accuracy: {accuracy}')

# Make predictions
predictions = model.predict(X_test)
y_pred = np.argmax(predictions, axis=1)

# Calculate confusion matrix
conf_matrix = confusion_matrix(np.argmax(y_test, axis=1), y_pred)

# Create confusion matrix table
conf_matrix_table = PrettyTable()
conf_matrix_table.title = "Confusion Matrix"
conf_matrix_table.field_names = ["", *[f"Predicted {i}" for i in range(len(label_encoder.classes_))]]

# Add rows for each actual class
for i in range(len(conf_matrix)):
    conf_matrix_table.add_row([f"Actual {i}", *conf_matrix[i]])

# Print confusion matrix
print(conf_matrix_table)
