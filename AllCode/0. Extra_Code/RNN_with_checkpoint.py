# -*- coding: utf-8 -*-
"""
Created on Tue Mar 19 17:55:29 2024

@author: Admin
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, SimpleRNN
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint

# Load data and select only 80000 features
df = pd.read_feather('C:\FeatureVector\Feb_feature_benign_malware.feather')

# Separate features and labels
X = df.iloc[:, 2:]  # Starting from the 3rd column up to the 80000th column as features
y = df['family']

# Encode the target column
encoder = LabelEncoder()
y = encoder.fit_transform(y)

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Reshape the input data for RNN
X_train_rnn = X_train.values.reshape(-1, 88972, 1)
X_test_rnn = X_test.values.reshape(-1, 88972, 1)

# Define a callback to save the model weights after each epoch
checkpoint_filepath = 'model_checkpoint.h5'
model_checkpoint_callback = ModelCheckpoint(
    filepath=checkpoint_filepath,
    save_weights_only=True,
    monitor='val_accuracy',
    mode='max',
    save_best_only=True
)

# Build the RNN model
model = Sequential([
    SimpleRNN(128, activation='relu', input_shape=(88972, 1)),
    Dropout(0.5),
    Dense(64, activation='relu'),
    Dropout(0.5),
    Dense(8, activation='softmax')
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.0001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
try:
    model.load_weights(checkpoint_filepath)
except:
    pass

model.fit(X_train_rnn, y_train, epochs=100, batch_size=64, validation_data=(X_test_rnn, y_test), callbacks=[model_checkpoint_callback])

# Evaluate the model
loss, accuracy = model.evaluate(X_test_rnn, y_test)
print(f"Loss: {loss}, Accuracy: {accuracy}")

# Make predictions
predictions = model.predict(X_test_rnn)
