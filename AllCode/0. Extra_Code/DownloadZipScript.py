import os
import requests
import time
import codecs

API_KEY = 'J62qm0Xsgf0CWUmoULPhQjJoU4hInNmc'
API_ENDPOINT = 'https://virusshare.com/apiv2/'
API_URL = "https://virusshare.com/apiv2/download?apikey=AALXcPoEVGgKM0ZYHsaCKrIquShDoaYg&hash="

folder_path = r"G:\Malware Classes MD5 txt files\benign"

def send_hash_request(hash_value):
    try:
        url = API_URL + hash_value
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error sending request: {e}")
        return None

def save_zip_file(hash_value):
    try:
        file_name = f"{hash_value}.zip"
        file_path = os.path.join(folder_path, file_name)
        url = API_URL + hash_value
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print(f"File saved at: {file_path}")
        else:
            print(f"Error downloading zip for {hash_value}")
    except IOError as e:
        print(f"Error saving file: {e}")

def process_hashes(hash_file):
    try:
        with open(hash_file, 'r') as file:
            hashes = file.read().splitlines()

        total_hashes = len(hashes)
        processed_hashes = 0

        # Check if progress file exists
        progress_file_path = os.path.join(folder_path, "progress.txt")
        if os.path.exists(progress_file_path):
            with open(progress_file_path, 'r') as progress_file:
                last_processed_hash = progress_file.read().strip()
                if last_processed_hash in hashes:
                    last_processed_index = hashes.index(last_processed_hash)
                    hashes = hashes[last_processed_index + 1:]
                    processed_hashes = total_hashes - len(hashes)
                    print(f"Resuming from hash {last_processed_hash}")

        for hash_value in hashes:
            processed_hashes += 1
            print(f"Processing hash {processed_hashes}/{total_hashes}")

            save_zip_file(hash_value)

            # Save progress
            with open(progress_file_path, 'w') as progress_file:
                progress_file.write(hash_value)

            time.sleep(16)  # Add a 30-second delay between requests

        # Remove progress file if all hashes processed successfully
        if processed_hashes == total_hashes and os.path.exists(progress_file_path):
            os.remove(progress_file_path)

    except FileNotFoundError as e:
        print(f"Error reading hash file: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")


# Replace '<hash_file>' with the actual name of your hash file
process_hashes(r"G:\Malware Classes MD5 txt files\benign_md5.txt")
