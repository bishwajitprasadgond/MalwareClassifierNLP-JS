# -*- coding: utf-8 -*-
"""
Created on Fri Feb  9 12:12:13 2024

@author: admin
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from prettytable import PrettyTable

# Load data and select only 80000 features
df = pd.read_csv(r'F:\Malware_old\datasets/feature_vec_malware.csv').iloc[:, :80001]

# Separate features and labels
X = df.iloc[:, 2:]  # Starting from the 3rd column as features
y = df['family']

# Encode labels into numeric format
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)
y_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train= np.array(X_train)
# Initialize classifiers with different kernels
classifiers = {
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "k-Nearest Neighbors": KNeighborsClassifier(),
    "Naive Bayes": GaussianNB(),
    "SVM Linear": SVC(kernel='linear', random_state=42),
    "SVM Polynomial Degree 3": SVC(kernel='poly', degree=3, random_state=42),
    "SVM Polynomial Degree 4": SVC(kernel='poly', degree=4, random_state=42),
    "SVM RBF": SVC(kernel='rbf', random_state=42),
    "SVM Sigmoid": SVC(kernel='sigmoid', random_state=42)
}

# classifiers = {    "XGBoost": XGBClassifier(objective='multi:softmax', random_state=42),
#     "LightGBM": LGBMClassifier(random_state=42)}

# Initialize dictionaries to store evaluation metrics
metrics_dict = {
    "Classifier": [],
    "Accuracy": [],
    "Precision": [],
    "Recall": [],
    "F1 Score": [],
}

# Iterate through each classifier
for clf_name, classifier in classifiers.items():
    classifier.fit(X_train, y_train)
    predictions = classifier.predict(X_test)
    
    # Calculate evaluation metrics
    conf_matrix = confusion_matrix(y_test, predictions)
    
    # Create confusion matrix table
    conf_matrix_table = PrettyTable()
    conf_matrix_table.title = f"Confusion Matrix for {clf_name}"
    conf_matrix_table.field_names = ["", "Predicted 0", "Predicted 1", "Predicted 2", "Predicted 3", "Predicted 4", "Predicted 5", "Predicted 6", "Predicted 7"]
    
    # Add rows for each actual class
    for i in range(conf_matrix.shape[0]):
        conf_matrix_table.add_row([f"Actual {i}"] + list(conf_matrix[i]))
    
    # Print confusion matrix for each classifier
    print(conf_matrix_table)
            
    # Calculate metrics
    accuracy = np.trace(conf_matrix) / np.sum(conf_matrix)
    precision = np.where(np.sum(conf_matrix, axis=0) == 0, 0, np.diag(conf_matrix) / np.sum(conf_matrix, axis=0))
    recall = np.where(np.sum(conf_matrix, axis=1) == 0, 0, np.diag(conf_matrix) / np.sum(conf_matrix, axis=1))
    f1_score = np.where((precision + recall) == 0, 0, 2 * precision * recall / (precision + recall))

    # Store evaluation metrics in the dictionary
    metrics_dict["Classifier"].append(clf_name)
    metrics_dict["Accuracy"].append(accuracy)
    metrics_dict["Precision"].append(np.mean(precision))
    metrics_dict["Recall"].append(np.mean(recall))
    metrics_dict["F1 Score"].append(np.mean(f1_score))
    
# Create PrettyTable for evaluation metrics
metrics_table = PrettyTable()
metrics_table.field_names = ["Classifier", "Accuracy", "Precision", "Recall", "F1 Score"]
for i in range(len(metrics_dict["Classifier"])):
    metrics_table.add_row([
        metrics_dict["Classifier"][i],
        metrics_dict["Accuracy"][i],
        metrics_dict["Precision"][i],
        metrics_dict["Recall"][i],
        metrics_dict["F1 Score"][i]
    ])

# Print evaluation metrics table
print("Evaluation Metrics:")
print(metrics_table)

#%%                  DEEP LEARNING PART

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Load data and select only 80000 features
df = pd.read_csv(r'F:\Malware_old\datasets/feature_vec_malware.csv').iloc[:, :80001]

# Separate features and labels
X = df.iloc[:, 2:80000]  # Starting from the 3rd column up to the 80000th column as features
y = df['family']

# Encode the target column
encoder = LabelEncoder()
y = encoder.fit_transform(y)

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# # Build the neural network model
# model = Sequential([
#     Dense(128, activation='relu', input_shape=(79998,)),
#     Dropout(0.5),
#     Dense(64, activation='relu'),
#     Dropout(0.5),
#     Dense(8, activation='softmax')
# ])

# # Compile the model
# model.compile(optimizer=Adam(learning_rate=0.001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model = Sequential([
    Dense(256, activation='relu', input_shape=(79998,)),
    Dropout(0.3),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(8, activation='softmax')
])

model.compile(optimizer=Adam(learning_rate=0.0001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=100, batch_size=64, validation_data=(X_test, y_test))

# Train the model
#model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Loss: {loss}, Accuracy: {accuracy}")

# Make predictions
predictions = model.predict(X_test)
#%%
from keras.models import load_model
#save model
model.save('Malware_deeplearning')
#load the model
same_model = load_model()
#%%
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt

# Get predicted probabilities for the test set
y_prob = model.predict(X_test)

# Compute ROC curve and ROC area for each class
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(8):  # Assuming you have 8 classes
    fpr[i], tpr[i], _ = roc_curve(y_test, y_prob[:, i], pos_label=i)
    roc_auc[i] = auc(fpr[i], tpr[i])

# Plot ROC curve for each class
plt.figure(figsize=(10, 6))
for i in range(8):
    plt.plot(fpr[i], tpr[i], label='ROC curve of class {} (area = {:.2f})'.format(i, roc_auc[i]))

plt.plot([0, 1], [0, 1], 'k--')  # Diagonal line
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

#%%

from sklearn.metrics import roc_auc_score, roc_curve
import matplotlib.pyplot as plt

# Get predicted probabilities for the test set
y_prob = model.predict(X_test)

# Compute ROC curve and AUC for each class
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(8):  # Assuming you have 8 classes
    fpr[i], tpr[i], _ = roc_curve(y_test, y_prob[:, i], pos_label=i)
    roc_auc[i] = roc_auc_score(y_test == i, y_prob[:, i])

# Plot ROC curve for each class
plt.figure(figsize=(10, 6))
for i in range(8):
    plt.plot(fpr[i], tpr[i], label='ROC curve of class {} (AUC = {:.2f})'.format(i, roc_auc[i]))

plt.plot([0, 1], [0, 1], 'k--')  # Diagonal line
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

