# -*- coding: utf-8 -*-
"""
Created on Mon Oct  9 16:52:37 2023

@author: bishwajit
"""
import nltk
nltk.download('punkt')
nltk.download('stopwords')

import os
import csv
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer

# Input text file containing all unique bigrams
input_text_file = 'path_to_unique_bigrams.txt'  # Replace with your input text file path
output_csv_file = 'tfidf_scores.csv'  # Replace with your desired output CSV file path

# Read the content of the input text file
with open(input_text_file, 'r', encoding='utf-8') as file:
    text = file.read()

# Tokenize the text into bigrams
bigrams = text.split()

# Convert bigrams to a single string with space-separated tokens
bigram_text = ' '.join(bigrams)

# Create a TF-IDF vectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words=stopwords.words('english'))

# Compute TF-IDF scores
tfidf_matrix = tfidf_vectorizer.fit_transform([bigram_text])

# Get feature names (bigrams)
feature_names = tfidf_vectorizer.get_feature_names_out()

# Get TF-IDF scores as a dense array
tfidf_scores = tfidf_matrix.toarray()[0]

# Create a dictionary to store bigram-TF-IDF score pairs
bigram_tfidf_dict = dict(zip(feature_names, tfidf_scores))

# Sort the dictionary by TF-IDF score in descending order
sorted_bigram_tfidf = {k: v for k, v in sorted(bigram_tfidf_dict.items(), key=lambda item: item[1], reverse=True)}

# Write the sorted bigram-TF-IDF scores to a CSV file
with open(output_csv_file, 'w', newline='', encoding='utf-8') as csv_file:
    csv_writer = csv.writer(csv_file)
    
    # Write the header row
    csv_writer.writerow(['Bigram', 'TF-IDF Score'])
    
    # Write each bigram and its TF-IDF score to the CSV file
    for bigram, tfidf_score in sorted_bigram_tfidf.items():
        csv_writer.writerow([bigram, tfidf_score])

print(f"TF-IDF scores written to '{output_csv_file}'.")
