# -*- coding: utf-8 -*-
"""
Created on Sun Feb 11 14:44:52 2024

@author: admin
"""

import pandas as pd
import random
import string

# Example DataFrame
df = pd.read_csv(r'C:\Users\Admin\Documents\GitHub\datasets/malware.csv').iloc[:, :80001]
#%%
# Function to generate initial population
def generate_population(size, length):
    return [''.join(random.choices(string.ascii_lowercase, k=length)) for _ in range(size)]

# Function to calculate fitness (Edit distance from a target string)
def calculate_fitness(target, population):
    return [sum(1 for a, b in zip(target, individual) if a != b) for individual in population]

# Function for selection (Tournament selection)
def tournament_selection(population, fitness_scores, tournament_size):
    selected = []
    for _ in range(len(population)):
        participants = random.choices(population, k=tournament_size)
        scores = [fitness_scores[population.index(ind)] for ind in participants]
        selected.append(participants[scores.index(min(scores))])
    return selected

# Function for single-point crossover
def crossover(parent1, parent2):
    crossover_point = random.randint(0, min(len(parent1), len(parent2)) - 1)
    child1 = parent1[:crossover_point] + parent2[crossover_point:]
    child2 = parent2[:crossover_point] + parent1[crossover_point:]
    return child1, child2

# Function for mutation
def mutate(individual, mutation_rate):
    return ''.join([c if random.random() > mutation_rate else random.choice(string.ascii_lowercase) for c in individual])

# Genetic Algorithm
def genetic_algorithm(target, population_size=100, generations=100, tournament_size=5, mutation_rate=0.01):
    population = generate_population(population_size, len(target))
    for _ in range(generations):
        fitness_scores = calculate_fitness(target, population)
        new_population = []

        # Elitism: Keep the best individual from the previous generation
        best_fit_index = fitness_scores.index(min(fitness_scores))
        new_population.append(population[best_fit_index])

        # Selection, Crossover, and Mutation
        selected = tournament_selection(population, fitness_scores, tournament_size)
        for i in range(0, len(selected), 2):
            offspring1, offspring2 = crossover(selected[i], selected[i + 1])
            offspring1 = mutate(offspring1, mutation_rate)
            offspring2 = mutate(offspring2, mutation_rate)
            new_population.extend([offspring1, offspring2])

        population = new_population[:population_size]

    # Return the best individual found
    best_fit_index = fitness_scores.index(min(fitness_scores))
    return population[best_fit_index]
#%%
# Apply genetic algorithm to each element in the 'Unigram' column
df['Best_Fit_Unigram'] = df['Unigram'].apply(lambda x: genetic_algorithm(x))

#print(df)
