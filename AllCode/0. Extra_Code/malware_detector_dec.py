# -*- coding: utf-8 -*-
"""
Created on Sun Dec 17 18:27:33 2023

@author: BISHWAJIT
"""

import os
import sys
import pickle
import argparse
import re
import numpy
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction import FeatureHasher

def get_string_features(path, hasher):
    # Extract strings from binary file using regular expressions
    chars = r" -~"
    min_length = 5
    string_regexp = '[%s]{%d,}' % (chars, min_length)
    file_object = open(path)
    data = file_object.read()
    pattern = re.compile(string_regexp)
    strings = pattern.findall(data)

    # Store string features in dictionary form
    string_features = {}
    for string in strings:
        string_features[string] = 1

    # Hash the features using the hashing trick
    hashed_features = hasher.transform([string_features])

    # Do some data munging to get the feature array
    hashed_features = hashed_features.todense()
    hashed_features = numpy.asarray(hashed_features)
    hashed_features = hashed_features[0]

    # Return hashed string features
    print("Extracted {0} strings from {1}".format(len(string_features), path))
    return hashed_features

def scan_file(path):
    # Scan a file to determine if it is malicious or benign
    if not os.path.exists("saved_detector.pkl"):
        print("Train a detector before scanning files.")
        sys.exit(1)

    with open("saved_detector.pkl", "rb") as saved_detector:
        classifier, hasher = pickle.load(saved_detector)

    features = get_string_features(path, hasher)
    result_proba = classifier.predict_proba([features])[:, 1]

    # If the user specifies malware_paths and benignware_paths, train a detector
    if result_proba > 0.5:
        print("It appears this file is malicious!", result_proba)
    else:
        print("It appears this file is benign.", result_proba)

def train_detector(benign_path, malicious_path, hasher):
    # Train the detector on the specified training data
    def get_training_paths(directory):
        targets = []
        for path in os.listdir(directory):
            targets.append(os.path.join(directory, path))
        return targets

    malicious_paths = get_training_paths(malicious_path)
    benign_paths = get_training_paths(benign_path)

    X = [get_string_features(path, hasher) for path in malicious_paths + benign_paths]
    y = [1 for _ in range(len(malicious_paths))] + [0 for _ in range(len(benign_paths))]
    
    classifier = RandomForestClassifier(64)
    classifier.fit(X, y)

    with open("saved_detector.pkl", "wb") as saved_detector:
        pickle.dump((classifier, hasher), saved_detector)

def get_training_data(benign_path, malicious_path, hasher):
    def get_training_paths(directory):
        targets = []
        for path in os.listdir(directory):
            targets.append(os.path.join(directory, path))
        return targets

    malicious_paths = get_training_paths(malicious_path)
    benign_paths = get_training_paths(benign_path)

    X = [get_string_features(path, hasher) for path in malicious_paths + benign_paths]
    y = [1 for _ in range(len(malicious_paths))] + [0 for _ in range(len(benign_paths))]

    return X, y

# Argument parser setup
parser = argparse.ArgumentParser("get windows object vectors for files")
parser.add_argument("--malware_paths", default=None, help="Path to malware training files")
parser.add_argument("--benignware_paths", default=None, help="Path to benignware training files")
parser.add_argument("--scan_file_path", default=None, help="File to scan")
args = parser.parse_args()

hasher = FeatureHasher(20000)

if args.malware_paths and args.benignware_paths:
    train_detector(args.benignware_paths, args.malware_paths, hasher)
elif args.scan_file_path:
    scan_file(args.scan_file_path)
else:
    print("[*] You did not specify a path to scan, "
          "nor did you specify paths to malicious and benign training files. "
          "Please specify one of these to use the detector.\n")
    parser.print_help()

path = r'E:\0MALWARE\win_benign\netwindows'
get_string_features(path, hasher)