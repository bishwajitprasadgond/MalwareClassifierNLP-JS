# -*- coding: utf-8 -*-
"""
Created on Sat Oct  7 14:29:53 2023

@author: bishwajit
"""

import json
import re
import os

# Specify the directory path
path = r'G:\new_malware_json_zip\worm_json'

# Specify the location where you want to save the output files
output_path = r'G:\new_malware_json_zip\split_data\worm1'  # Change this to your desired output directory

# Create four output directories if they don't exist
output_categories = ['api_name', 'api_arguments', 'api_return', 'api_cat']
for category in output_categories:
    category_path = os.path.join(output_path, category)
    os.makedirs(category_path, exist_ok=True)

# Create separate progress files for each category
progress_files = {}
for category in output_categories:
    progress_files[category] = os.path.join(output_path, category, "progress.txt")

# Initialize variables to keep track of the last successfully processed file for each category
last_successful_file_indices = {category: -1 for category in output_categories}

# Load progress for each category from their respective progress files
for category, progress_file_path in progress_files.items():
    if os.path.exists(progress_file_path):
        with open(progress_file_path, 'r') as progress_file:
            last_successful_file_indices[category] = int(progress_file.read())

# List all files in the specified directory
dirs = os.listdir(path)

for a in range(last_successful_file_indices['api_name'] + 1, len(dirs)):
    print(a)
    filetoopen = os.path.join(path, dirs[a])  # Use os.path.join to create a valid file path

    try:
        with open(filetoopen, 'r', encoding='utf-8') as json_file:
            data = json.load(json_file)

        api_name = []
        api_arguments = []
        api_return = []
        api_cat = []

        if 'behavior' in data and 'processes' in data['behavior']:
            sign = data['behavior']['processes']

            for k in range(0, len(sign)):
                api_marks = sign[k]['calls']
                if len(api_marks) > 0:
                    for x in range(0, len(api_marks)):
                        intrs = api_marks[x]
                        api_name.append(intrs['api'])

                        # Convert arguments to a string and remove spaces
                        arguments_str = ",".join(str(value) for value in intrs['arguments'].keys())
                        arguments_str = re.sub(r'\s', '', arguments_str)
                        api_arguments.append(arguments_str.encode('utf-8', 'replace').decode())

                        # Convert return value to a string
                        api_return.append(str(intrs['return_value']))
                        api_cat.append(intrs['category'])
        else:
            print(f"Key 'behavior' or 'processes' not found in {filetoopen}. Skipping.")

        # Handle 'apistats' if available
        if 'behavior' in data and 'apistats' in data['behavior']:
            behav = data['behavior']['apistats']
            key_list = list(behav.keys())
            for p in range(0, len(key_list)):
                extra_ent = behav[key_list[p]]
                sequence = [key for key, value in extra_ent.items() for _ in range(value)]
                api_name.extend(sequence)

                # Calculate differences and fill with 'na'
                len_api_name = len(api_name)
                diff_name_arg = len_api_name - len(api_arguments)
                my_list_name_arg = ["na"] * diff_name_arg
                diff_name_ret = len_api_name - len(api_return)
                my_list_name_ret = ["na"] * diff_name_ret
                diff_name_cat = len_api_name - len(api_cat)
                my_list_name_cat = ["na"] * diff_name_cat

                api_arguments.extend(my_list_name_arg)
                api_return.extend(my_list_name_ret)
                api_cat.extend(my_list_name_cat)
        else:
            print(f"Key 'apistats' not found in {filetoopen}. Skipping.")

        file_path = data['target']['file']['md5']

        # Specify the full path for saving the output files in their respective folders
        name = os.path.join(output_path, 'api_name', "api_" + file_path + ".txt")
        argp = os.path.join(output_path, 'api_arguments', "arg_" + file_path + ".txt")
        retp = os.path.join(output_path, 'api_return', "ret_" + file_path + ".txt")
        catp = os.path.join(output_path, 'api_cat', "cat_" + file_path + ".txt")

        # Write the lists to files
        with open(name, 'w', encoding='utf-8') as file:
            for item in api_name:
                file.write(item + '\n')

        print(f"The list has been written to '{name}'.")

        with open(argp, 'w', encoding='utf-8') as file:
            for item in api_arguments:
                file.write(item + '\n')

        print(f"The list has been written to '{argp}'.")

        with open(retp, 'w', encoding='utf-8') as file:
            for item in api_return:
                file.write(item + '\n')

        print(f"The list has been written to '{retp}'.")

        with open(catp, 'w', encoding='utf-8') as file:
            for item in api_cat:
                file.write(item + '\n')

        print(f"The list has been written to '{catp}'.")

        # Update the progress file for each category with the last successfully processed file index
        for category, progress_file_path in progress_files.items():
            with open(progress_file_path, 'w') as progress_file:
                progress_file.write(str(a))

    except Exception as e:
        print(f"Error processing {filetoopen}: {e}")

# Remove the progress files if all files have been processed successfully
for category, progress_file_path in progress_files.items():
    if os.path.exists(progress_file_path):
        os.remove(progress_file_path)
