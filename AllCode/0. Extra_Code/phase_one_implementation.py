# -*- coding: utf-8 -*-
"""
Created on Sat Oct  7 18:01:10 2023

@author: bishwajit
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Embedding, Conv1D, GlobalMaxPooling1D, Dense, Flatten
from keras.layers import Dropout
from keras.utils import to_categorical
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.layers import Embedding, Conv1D, GlobalMaxPooling1D, Dense
from keras.optimizers import Adam

# Load and preprocess your merged text data (replace with your data loading logic)
data = pd.read_csv('merged_data.csv')  # Replace with your data file path
text = data['text'].values
labels = data['labels'].values

# Encode the labels using LabelEncoder
label_encoder = LabelEncoder()
labels = label_encoder.fit_transform(labels)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(text, labels, test_size=0.2, random_state=42)

# Tokenize and pad sequences
max_words = 10000  # Set the maximum number of words in your vocabulary
max_sequence_length = 200  # Set the maximum sequence length

tokenizer = Tokenizer(num_words=max_words)
tokenizer.fit_on_texts(X_train)

X_train_sequences = tokenizer.texts_to_sequences(X_train)
X_test_sequences = tokenizer.texts_to_sequences(X_test)

X_train_padded = pad_sequences(X_train_sequences, maxlen=max_sequence_length)
X_test_padded = pad_sequences(X_test_sequences, maxlen=max_sequence_length)

# Define the CBOW model
embedding_dim = 100  # Set the embedding dimension
model = Sequential()
model.add(Embedding(max_words, embedding_dim, input_length=max_sequence_length))
model.add(GlobalMaxPooling1D())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the CBOW model
epochs = 10  # Set the number of training epochs
batch_size = 32  # Set the batch size
model.fit(X_train_padded, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_test_padded, y_test))

# Extract the embedding layer weights for n-gram model
embedding_weights = model.layers[0].get_weights()[0]

# Define the bags of n-grams model
n_gram_max_features = 10000  # Set the maximum number of n-grams
n_gram_max_sequence_length = 200  # Set the maximum sequence length for n-grams

n_gram_model = Sequential()
n_gram_model.add(Embedding(n_gram_max_features, embedding_dim, input_length=n_gram_max_sequence_length, weights=[embedding_weights], trainable=False))
n_gram_model.add(Conv1D(128, 3, activation='relu'))
n_gram_model.add(GlobalMaxPooling1D())
n_gram_model.add(Dense(128, activation='relu'))
n_gram_model.add(Dropout(0.5))
n_gram_model.add(Dense(1, activation='sigmoid'))

# Compile the bags of n-grams model
n_gram_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the bags of n-grams model
n_gram_model.fit(X_train_padded, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_test_padded, y_test))

# Evaluate the bags of n-grams model
score = n_gram_model.evaluate(X_test_padded, y_test, verbose=0)
print(f'Test loss: {score[0]}')
print(f'Test accuracy: {score[1]}')
