# -*- coding: utf-8 -*-
"""
Created on Wed Dec 27 12:48:28 2023

@author: BISHWAJIT
"""

import evalml
from evalml import AutoMLSearch
from evalml.preprocessing import split_data

# Assuming 'result_df' is the DataFrame you want to use for modeling
# If 'family' column contains categorical values, convert it to category type
result_df['family'] = result_df['family'].astype('category')

# Split the data into features and target
X = result_df.drop(columns=['hash', 'family'])
y = result_df['family']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = split_data(X, y, problem_type='multiclass', test_size=0.2, random_seed=42)

# Initialize AutoMLSearch object
automl = AutoMLSearch(X_train=X_train, y_train=y_train, problem_type='multiclass', objective='f1 macro')

# Perform automated search for the best model
automl.search()

# Get the best pipeline
best_pipeline = automl.best_pipeline

# Train the best pipeline on the full training data
best_pipeline.fit(X_train, y_train)

# Make predictions on the test set
y_pred = best_pipeline.predict(X_test)

# Evaluate the model performance
automl.describe_pipeline(automl.rankings.iloc[0]["id"])

# Get the feature importances if available
if 'permutation_importance' in best_pipeline.features:
    feature_importances = best_pipeline.features['permutation_importance']
    print("Feature Importances:\n", feature_importances)

# Display the final results
print('AutoML Process Completed Successfully')
