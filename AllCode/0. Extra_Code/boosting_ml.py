# -*- coding: utf-8 -*-
"""
Created on Wed Feb 28 12:03:56 2024

@author: Admin
"""

import pandas as pd
from scipy.sparse import csr_matrix
from scipy.sparse import load_npz

# Assuming your DataFrame is loaded into df
df = pd.read_csv(r'C:\FeatureVector\Feb_feature_benign_malware.csv')
df.to_parquet('C:\FeatureVector\Feb_feature_benign_malware.parquet')
#%%
#df.to_feather('C:\FeatureVector\Feb_feature_benign_malware.feather')

#%%
# Convert DataFrame to a sparse matrix
sparse_matrix = csr_matrix(df.values)

# Save the sparse matrix
from scipy import sparse
sparse.save_npz('C:\FeatureVector\Feb_feature_benign_malware.npz', sparse_matrix)

#%%
# Load the sparse matrix
sparse_matrix = load_npz('D:\Feature_Vec_Creation\feature_vec\sparse_matrix.npz')

# Convert the sparse matrix to a DataFrame
df_test = pd.DataFrame.sparse.from_spmatrix(sparse_matrix)
#%%                         RUNNING AND SAVING ML ALGO (PICKEL FILE) 
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from prettytable import PrettyTable
import pickle

# Load data and select only 80000 features
# df = pd.read_csv(r'C:\FeatureVector\Feb_feature_benign_malware.csv')
# df = pd.read_csv(r'C:\FeatureVector\Feb_feature_benign_malware.csv').iloc[:, :80001]

# Separate features and labels
X = df.iloc[:, 2:]  # Starting from the 3rd column as features
y = df['family']

# Encode labels into numeric format
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)
y_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train = np.array(X_train)

#Initialize classifiers with different kernels
classifiers = {
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "k-Nearest Neighbors": KNeighborsClassifier(),
    "Naive Bayes": GaussianNB(),
    "SVM Linear": SVC(kernel='linear', random_state=42),
    "SVM Polynomial Degree 3": SVC(kernel='poly', degree=3, random_state=42),
    "SVM Polynomial Degree 4": SVC(kernel='poly', degree=4, random_state=42),
    "SVM RBF": SVC(kernel='rbf', random_state=42),
    "SVM Sigmoid": SVC(kernel='sigmoid', random_state=42),
    "XGBoost": XGBClassifier(objective='multi:softmax', random_state=42),
    "LightGBM": LGBMClassifier(random_state=42)
}


# Initialize dictionaries to store evaluation metrics
metrics_dict = {
    "Classifier": [],
    "Accuracy": [],
    "Precision": [],
    "Recall": [],
    "F1 Score": [],
}

# Iterate through each classifier
trained_classifiers = {}
for clf_name, classifier in classifiers.items():
    classifier.fit(X_train, y_train)
    trained_classifiers[clf_name] = classifier  # Store trained classifier
    
    predictions = classifier.predict(X_test)
    
    # Calculate evaluation metrics
    conf_matrix = confusion_matrix(y_test, predictions)
    
    # Create confusion matrix table
    conf_matrix_table = PrettyTable()
    conf_matrix_table.title = f"Confusion Matrix for {clf_name}"
    conf_matrix_table.field_names = ["", "Predicted 0", "Predicted 1", "Predicted 2", "Predicted 3", "Predicted 4", "Predicted 5", "Predicted 6", "Predicted 7"]
    
    # Add rows for each actual class
    for i in range(conf_matrix.shape[0]):
        conf_matrix_table.add_row([f"Actual {i}"] + list(conf_matrix[i]))
    
    # Print confusion matrix for each classifier
    print(conf_matrix_table)
            
    # Calculate metrics
    accuracy = np.trace(conf_matrix) / np.sum(conf_matrix)
    precision = np.where(np.sum(conf_matrix, axis=0) == 0, 0, np.diag(conf_matrix) / np.sum(conf_matrix, axis=0))
    recall = np.where(np.sum(conf_matrix, axis=1) == 0, 0, np.diag(conf_matrix) / np.sum(conf_matrix, axis=1))
    f1_score = np.where((precision + recall) == 0, 0, 2 * precision * recall / (precision + recall))

    # Store evaluation metrics in the dictionary
    metrics_dict["Classifier"].append(clf_name)
    metrics_dict["Accuracy"].append(accuracy)
    metrics_dict["Precision"].append(np.mean(precision))
    metrics_dict["Recall"].append(np.mean(recall))
    metrics_dict["F1 Score"].append(np.mean(f1_score))

# Save trained classifiers to a pickle file
with open('trained_classifiers.pkl', 'wb') as f:
    pickle.dump(trained_classifiers, f)

# Save evaluation metrics to a pickle file
with open('evaluation_metrics.pkl', 'wb') as f:
    pickle.dump(metrics_dict, f)

# Create PrettyTable for evaluation metrics
metrics_table = PrettyTable()
metrics_table.field_names = ["Classifier", "Accuracy", "Precision", "Recall", "F1 Score"]
for i in range(len(metrics_dict["Classifier"])):
    metrics_table.add_row([
        metrics_dict["Classifier"][i],
        metrics_dict["Accuracy"][i],
        metrics_dict["Precision"][i],
        metrics_dict["Recall"][i],
        metrics_dict["F1 Score"][i]
    ])

# Print evaluation metrics table
print("Evaluation Metrics:")
print(metrics_table)
#%%                              HYPERPARAMETER TUNING

from sklearn.model_selection import GridSearchCV
from sklearn.metrics import make_scorer, accuracy_score, precision_score
###################################################################################################
# %%
classifiers = {
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    # "k-Nearest Neighbors": KNeighborsClassifier(),
    # #"Naive Bayes": GaussianNB(),
    # "SVM Linear": SVC(kernel='linear', random_state=42),
    # "SVM Polynomial Degree 3": SVC(kernel='poly', degree=3, random_state=42),
    # "SVM Polynomial Degree 4": SVC(kernel='poly', degree=4, random_state=42),
    # "SVM RBF": SVC(kernel='rbf', random_state=42),
    # "SVM Sigmoid": SVC(kernel='sigmoid', random_state=42),
    # "XGBoost": XGBClassifier(random_state=42),
    # "LightGBM": LGBMClassifier(random_state=42)
}

# Define the parameter grids for grid search including XGBoost and LightGBM
param_grids = {
    "Decision Tree": {"max_depth": [None, 10, 20, 30], "min_samples_split": [2, 5, 10]},
    "Random Forest": {"n_estimators": [100, 200, 300], "max_depth": [None, 10, 20, 30], "min_samples_split": [2, 5, 10]},
    # "k-Nearest Neighbors": {"n_neighbors": [3, 5, 7], "weights": ['uniform', 'distance']},
    # "SVM Linear": {"C": [0.1, 1, 10]},
    # "SVM Polynomial Degree 3": {"C": [0.1, 1, 10]},
    # "SVM Polynomial Degree 4": {"C": [0.1, 1, 10]},
    # "SVM RBF": {"C": [0.1, 1, 10], "gamma": ['scale', 'auto']},
    # "SVM Sigmoid": {"C": [0.1, 1, 10], "gamma": ['scale', 'auto']},
    # "XGBoost": {"max_depth": [3, 5, 7], "learning_rate": [0.1, 0.01, 0.001]},
    # "LightGBM": {"max_depth": [3, 5, 7], "learning_rate": [0.1, 0.01, 0.001]}
}



# Define the scoring functions
scoring = {
    "Accuracy": make_scorer(accuracy_score),
    "Precision": make_scorer(precision_score, average='weighted')
}
# %%
# Perform grid search for each classifier
for name, clf in classifiers.items():
    print(f"Tuning hyperparameters for {name}")
    clf_grid = GridSearchCV(clf, param_grids[name], scoring=scoring, refit='Precision', cv=5, n_jobs=-1)
    clf_grid.fit(X_train, y_train)
    print(f"Best parameters: {clf_grid.best_params_}")
    print(f"Best Precision: {clf_grid.best_score_}")
    print(f"Accuracy: {accuracy_score(y_test, clf_grid.predict(X_test))}")
    print(f"Precision: {precision_score(y_test, clf_grid.predict(X_test), average='weighted')}")
    print("\n")
# %%
# Initialize dictionaries to store evaluation metrics
metrics_dict = {
    "Classifier": [],
    "Accuracy": [],
    "Precision": [],
    "Recall": [],
    "F1 Score": [],
}
# %%
# Iterate through each classifier
for clf_name, classifier in classifiers.items():
    classifier.fit(X_train, y_train)
    predictions = classifier.predict(X_test)
    
    # Calculate evaluation metrics
    conf_matrix = confusion_matrix(y_test, predictions)
    
    # Create confusion matrix table
    conf_matrix_table = PrettyTable()
    conf_matrix_table.title = f"Confusion Matrix for {clf_name}"
    conf_matrix_table.field_names = ["", "Predicted 0", "Predicted 1", "Predicted 2", "Predicted 3", "Predicted 4", "Predicted 5", "Predicted 6", "Predicted 7"]
    
    # Add rows for each actual class
    for i in range(conf_matrix.shape[0]):
        conf_matrix_table.add_row([f"Actual {i}"] + list(conf_matrix[i]))
    
    # Print confusion matrix for each classifier
    print(conf_matrix_table)
            
    # Calculate metrics
    accuracy = np.trace(conf_matrix) / np.sum(conf_matrix)
    precision = np.where(np.sum(conf_matrix, axis=0) == 0, 0, np.diag(conf_matrix) / np.sum(conf_matrix, axis=0))
    recall = np.where(np.sum(conf_matrix, axis=1) == 0, 0, np.diag(conf_matrix) / np.sum(conf_matrix, axis=1))
    f1_score = np.where((precision + recall) == 0, 0, 2 * precision * recall / (precision + recall))

    # Store evaluation metrics in the dictionary
    metrics_dict["Classifier"].append(clf_name)
    metrics_dict["Accuracy"].append(accuracy)
    metrics_dict["Precision"].append(np.mean(precision))
    metrics_dict["Recall"].append(np.mean(recall))
    metrics_dict["F1 Score"].append(np.mean(f1_score))
    
# Create PrettyTable for evaluation metrics
metrics_table = PrettyTable()
metrics_table.field_names = ["Classifier", "Accuracy", "Precision", "Recall", "F1 Score"]
for i in range(len(metrics_dict["Classifier"])):
    metrics_table.add_row([
        metrics_dict["Classifier"][i],
        metrics_dict["Accuracy"][i],
        metrics_dict["Precision"][i],
        metrics_dict["Recall"][i],
        metrics_dict["F1 Score"][i]
    ])
# %%
# Print evaluation metrics table
print("Evaluation Metrics:")
print(metrics_table)

#%%
df.shape