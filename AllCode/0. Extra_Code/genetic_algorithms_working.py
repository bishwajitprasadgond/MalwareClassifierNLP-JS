# -*- coding: utf-8 -*-
"""
Created on Mon Feb 12 14:46:21 2024

@author: BISHWAJIT
"""

import pandas as pd
import random

# Load the CSV file
df = pd.read_csv(r'F:\Malware_old\datasets/malware.csv').iloc[:, :80001]

# Function to split the feature into primary and secondary
def split_feature(feature):
    primary, secondary = feature.split('_')
    return primary, secondary

# Function to join primary and secondary with '_'
def join_feature(primary, secondary):
    return f"{primary}_{secondary}"

# Function to perform selection
def selection(population, fitness_scores):
    # Select two parents randomly based on their fitness scores
    parent1 = random.choices(population, weights=fitness_scores)[0]
    parent2 = random.choices(population, weights=fitness_scores)[0]
    return parent1, parent2

# Function to perform crossover
def crossover(parent1, parent2):
    crossover_point = random.randint(1, len(parent1) - 1)
    child1 = parent1[:crossover_point] + parent2[crossover_point:]
    child2 = parent2[:crossover_point] + parent1[crossover_point:]
    return child1, child2

# Function to perform mutation
def mutation(child):
    mutation_point = random.randint(0, len(child) - 1)
    mutated_gene = chr(random.randint(97, 122))  # Random lowercase letter
    child = child[:mutation_point] + mutated_gene + child[mutation_point + 1:]
    return child

# Example of how to use the functions
population = df['Unigram'].tolist()

# Calculate fitness scores (for demonstration purposes, fitness score is based on length)
fitness_scores = [len(feature) for feature in population]

# Create a list to store the new offspring features
new_offspring = []

# Generate new offspring
for _ in range(len(df)):
    parent1, parent2 = selection(population, fitness_scores)
    child1, child2 = crossover(parent1, parent2)
    child1 = mutation(child1)
    child2 = mutation(child2)
    new_offspring.append(child1)
    new_offspring.append(child2)

# Create a new DataFrame with the new offspring features
new_df = pd.DataFrame({'feature': new_offspring})

# Save the new DataFrame to a new CSV file
new_df.to_csv('F:\Malware_old\datasets/new_malware_offspring.csv', index=False)
df['fitness_score'] = fitness_scores
df.to_csv('F:\Malware_old\datasets/malware_with_fitness_score.csv', index=False)
