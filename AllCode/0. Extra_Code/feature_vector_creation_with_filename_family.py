import pandas as pd
import os

def compare_csv(file1_path, file2_path):
    # Extract headers from the single CSV file (file2)
    file2_df = pd.read_csv(file2_path)
    headers = set(file2_df['Unigram'])

    # Initialize examples list
    examples = []

    # Iterate through all CSV files in file1_path
    for file1 in os.listdir(file1_path):
        if file1.endswith('.csv'):
            file1_full_path = os.path.join(file1_path, file1)

            # Read the CSV file from file1_path
            file1_df = pd.read_csv(file1_full_path, skiprows=1)

            # Skip initializing the example if the CSV is empty
            if file1_df.empty:
                continue
            
            # Initialize example as a dictionary
            example = {}

            # Add file name and family column to the example
            example['name'] = os.path.splitext(os.path.basename(file1_full_path))[0].split('_')[0]
            example['family'] = os.path.splitext(os.path.basename(file1_full_path))[0].split('_')[1]

            # Compare lines and create examples
            for index, row in file1_df.iterrows():
                # Convert the row to a set for efficient intersection check
                row_set = set(row)

                # Check if any element in the row exists in the headers of file2
                present_in_file2 = any(element in headers for element in row_set)

                # Set the value to True only if present_in_file2 is True
                example[f'{",".join(map(str, row))}'] = present_in_file2

            examples.append(example)

    return examples

# Example usage:
file1_path = r'C:\sample\virus_unigram_created'
file2_path = r'D:\Malware\unigram_analysis\unique_unigram\unigram\50k\virus.csv'
#family_column = 'virus'

result_examples = compare_csv(file1_path, file2_path)
#print(result_examples[:1])

# Save the DataFrames to new CSV files
result_df = pd.DataFrame(result_examples)
result_df.to_csv(r'C:\sample\feature_vector\test_virus.csv', index=False, sep=',')
print("Feature CSV Saved")
