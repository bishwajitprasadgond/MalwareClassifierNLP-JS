# -*- coding: utf-8 -*-
"""
Created on Mon Jan 29 15:21:59 2024

@author: BISHWAJIT
"""

# -*- coding: utf-8 -*-
"""
Created on Sun Jan 28 23:34:32 2024

@author: BISHU
"""
#!/usr/bin/python
import os
import re
import numpy as np
import pandas as pd
from sklearn.feature_extraction import FeatureHasher

def get_string_features(path, hasher):
    # extract strings from binary file using regular expressions
    chars = r" -~"
    min_length = 5
    string_regexp = '[%s]{%d,}' % (chars, min_length)
    file_object = open(path, 'rb')  # Open file in binary mode
    data = file_object.read().decode('utf-8', errors='ignore')  # Decode binary data to string
    file_object.close()

    pattern = re.compile(string_regexp)
    strings = pattern.findall(data)

    # store string features in dictionary form
    string_features = {}
    for string in strings:
        string_features[string] = 1

    # hash the features using the hashing trick
    hashed_features = hasher.transform([string_features])

    # do some data munging to get the feature array
    hashed_features = hashed_features.todense()
    hashed_features = np.asarray(hashed_features)
    hashed_features = hashed_features[0]

    # return hashed string features
    print("Extracted {0} strings from {1}".format(len(string_features), path))
    return hashed_features

# Main part to iterate through files and store data in DataFrame
path = r"E:\test\winexe"
hasher = FeatureHasher(20000)

# Create an empty DataFrame to store the results
result_df = pd.DataFrame()

# Iterate through all files in the specified directory
for filename in os.listdir(path):
    # Check if the file is a regular file
    if os.path.isfile(os.path.join(path, filename)):
        # Get the full file path
        file_path = os.path.join(path, filename)

        # Get the hashed string features for the current file
        string_features = get_string_features(file_path, hasher)

        # Create a DataFrame with the hashed string features and file information
        file_info = pd.DataFrame([string_features], columns=[f"feature_{i}" for i in range(len(string_features))])
        file_info['file_path'] = file_path

        # Append the DataFrame to the result_df
        result_df = result_df.append(file_info, ignore_index=True)

# Print the resulting DataFrame
print(result_df)

